package main

// CSP estándar con dominios finitos

import (
	"encoding/json"
	"fmt"
)

// Variable representa una persona y sus posibles planes (lugar y horario).
type Variable struct {
	Nombre  string
	Dominio []map[string]string // Cada elemento del dominio es un mapa con "lugar" y "horario"
}

// Restricción es una función que evalúa si una asignación de variables cumple ciertas condiciones.
type Restriccion func(asignacion map[string]map[string]string) bool

// Problema representa un problema de satisfacción de restricciones.
type Problema struct {
	Variables     []Variable
	Restricciones []Restriccion
}

// VariableRef representa la referencia a una variable y su atributo dentro de una restricción.
type VariableRef struct {
	Name  string `json:"name"`
	Attrb string `json:"attrb"`
}

// RestriccionConfig representa la configuración de una restricción leída del JSON.
type RestriccionConfig struct {
	Tipo      string                 `json:"tipo"`
	Variables map[string]VariableRef `json:"variables"`
}

// BacktrackingAllSolutions implementa el algoritmo de backtracking para encontrar TODAS las soluciones.
// Devuelve un slice de mapas, donde cada mapa es una solución completa.
func BacktrackingAllSolutions(problema Problema, asignacion map[string]map[string]string) []map[string]map[string]string {
	var soluciones []map[string]map[string]string // Este slice almacenará todas las soluciones encontradas

	// 1. Verificar si la asignación actual es completa
	completa := true
	for _, v := range problema.Variables {
		if asignacion[v.Nombre] == nil {
			completa = false
			break
		}
	}
	if completa {
		// ¡Se encontró una solución completa! La copiamos y la añadimos a la lista.
		solucionEncontrada := make(map[string]map[string]string)
		for k, v := range asignacion {
			solucionEncontrada[k] = v // Copia profunda de la asignación
		}
		soluciones = append(soluciones, solucionEncontrada)
		return soluciones // Devolvemos esta solución (y cualquier otra que se haya encontrado en ramas anteriores)
	}

	// 2. Seleccionar una variable no asignada
	var variableActual Variable
	for _, v := range problema.Variables {
		if asignacion[v.Nombre] == nil {
			variableActual = v
			break
		}
	}

	// 3. Probar cada valor en el dominio de la variable actual
	for _, valor := range variableActual.Dominio {
		asignacionNueva := make(map[string]map[string]string)
		for k, v := range asignacion {
			asignacionNueva[k] = v
		}
		asignacionNueva[variableActual.Nombre] = valor

		// 4. Verificar restricciones
		valido := true
		for _, restriccion := range problema.Restricciones {
			if !restriccion(asignacionNueva) {
				valido = false
				break
			}
		}

		// 5. Si la asignación es válida, continuar con el backtracking
		if valido {
			// Llamada recursiva: ahora sumamos TODAS las soluciones que encuentre esta rama.
			subSoluciones := BacktrackingAllSolutions(problema, asignacionNueva)
			if len(subSoluciones) > 0 {
				soluciones = append(soluciones, subSoluciones...) // Añadimos todas las soluciones de la sub-rama
			}
		}
	}

	// 6. Al final, devolvemos todas las soluciones encontradas en esta llamada y sus recursiones.
	return soluciones
}

// CrearRestriccionDesdeConfig construye una función Restriccion a partir de una RestriccionConfig.
func CrearRestriccionDesdeConfig(config RestriccionConfig) Restriccion {
	switch config.Tipo {
	case "igualdad":
		var1Ref := config.Variables["variable1"]
		var2Ref := config.Variables["variable2"]

		return func(asignacion map[string]map[string]string) bool {
			plan1 := asignacion[var1Ref.Name]
			plan2 := asignacion[var2Ref.Name]
			if plan1 == nil || plan2 == nil {
				return true
			}
			return plan1[var1Ref.Attrb] == plan2[var2Ref.Attrb]
		}
	case "diferente":
		var1Ref := config.Variables["variable1"]
		var2Ref := config.Variables["variable2"]

		return func(asignacion map[string]map[string]string) bool {
			plan1 := asignacion[var1Ref.Name]
			plan2 := asignacion[var2Ref.Name]
			if plan1 == nil || plan2 == nil {
				return true
			}
			return plan1[var1Ref.Attrb] != plan2[var2Ref.Attrb]
		}
	default:
		fmt.Printf("Advertencia: Tipo de restricción no reconocido '%s'. Será ignorado.\n", config.Tipo)
		return func(asignacion map[string]map[string]string) bool { return true }
	}
}

func main() {
	// Tus datos de ejemplo, que ahora permiten múltiples soluciones
	personas := []Variable{
		{
			Nombre: "Alice",
			Dominio: []map[string]string{
				{"lugar": "parque", "horario": "mañana"},
				{"lugar": "cafetería", "horario": "tarde"},
				{"lugar": "cine", "horario": "noche"},
			},
		},
		{
			Nombre: "Bob",
			Dominio: []map[string]string{
				{"lugar": "parque", "horario": "mañana"},
				{"lugar": "cafetería", "horario": "tarde"},
				{"lugar": "cine", "horario": "noche"},
			},
		},
		{
			Nombre: "Charlie",
			Dominio: []map[string]string{
				{"lugar": "biblioteca", "horario": "mañana"},
				{"lugar": "biblioteca", "horario": "tarde"},
				{"lugar": "parque", "horario": "noche"},
			},
		},
	}

	// Restricciones de ejemplo:
	// - Alice y Bob deben tener el mismo lugar y horario.
	// - Charlie debe ir a la biblioteca.
	jsonRestricciones := `
    [
      {
        "tipo": "igualdad",
        "variables": {
          "variable1": {"name":"Alice", "attrb": "lugar"},
          "variable2": {"name":"Bob", "attrb": "lugar"}
        }
      },
      {
        "tipo": "igualdad",
        "variables": {
          "variable1": {"name":"Alice", "attrb": "horario"},
          "variable2": {"name":"Bob", "attrb": "horario"}
        }
      },
      {
        "tipo": "igualdad",
        "variables": {
          "variable1": {"name":"Charlie", "attrb": "lugar"},
          "variable2": {"name":"Charlie", "attrb": "lugar"}
        }
      },
      {
        "tipo": "diferente",
        "variables": {
          "variable1": {"name":"Bob", "attrb": "lugar"},
          "variable2": {"name":"Charlie", "attrb": "lugar"}
        }
      },
      {
        "tipo": "diferente",
        "variables": {
          "variable1": {"name":"Alice", "attrb": "lugar"},
          "variable2": {"name":"Charlie", "attrb": "lugar"}
        }
      }
    ]`

	var configs []RestriccionConfig
	err := json.Unmarshal([]byte(jsonRestricciones), &configs)
	if err != nil {
		fmt.Println("Error al parsear JSON de restricciones:", err)
		return
	}

	var restriccionesGeneradas []Restriccion
	for _, cfg := range configs {
		restriccionesGeneradas = append(restriccionesGeneradas, CrearRestriccionDesdeConfig(cfg))
	}

	problema := Problema{Variables: personas, Restricciones: restriccionesGeneradas}

	// Ahora llamamos a la función modificada
	soluciones := BacktrackingAllSolutions(problema, make(map[string]map[string]string))

	if len(soluciones) > 0 {
		fmt.Printf("\nSe encontraron %d solución(es):\n", len(soluciones))
		for i, solucion := range soluciones {
			fmt.Printf("\n--- Solución %d ---\n", i+1)
			for persona, plan := range solucion {
				fmt.Printf("%s visita %s en la %s\n", persona, plan["lugar"], plan["horario"])
			}
		}
	} else {
		fmt.Println("\nNo se encontró ninguna solución que satisfaga todas las restricciones.")
	}
}
